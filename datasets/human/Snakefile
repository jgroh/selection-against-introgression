import numpy as np
chrs = [str(x) for x in range(1,23)]
chrs.append("X")
units = ["physical", "genetic"]

# analyses common to both units. note gene density analysis differs between physical and genetic
#
wvlt_analyses = ["wv","wc_freq_log10rec","wc_freq_rec","wc_freq_gd","wc_rec_gd","lm", "wc_freq_B"]

rule all:
	input:
		expand("archaic_freqs/chr{chrom}_frq_{unit}_windows.txt", chrom = chrs, unit = units),
#		expand("wavelet_results/{analysis}_{unit}.txt", analysis = wvlt_analyses, unit=units),
#		"wavelet_results/wc_freq_gdr_physical.txt"

rule get_freq:
	input:
		skov_fragments="Skov_etal_2020_data/41586_2020_2225_MOESM3_ESM.txt",
		sank_calls="Sankararaman_etal_2014_data/summaries.release/CEU.hapmap/summaries/chr-{chr}.thresh-90.length-0.00.gz",
		sank_snps="Sankararaman_etal_2014_data/sankHg19ToHg38Snps.bed", # produced with liftOver
		stein_calls="Steinrucken_etal_2018_data/March2018/CEU_lax_chr{chr}/chr{chr}_frqs.txt",
		stein_snps="Steinrucken_etal_2018_data/March2018/steinHg19ToHg38Snps.bed",
		recmap="Halldorsson_etal_2019_data/aau1043_datas3"
	output:
		expand("archaic_freqs/chr{{chr}}_frq_{unit}_windows.txt",unit=units)
	shell:
		"""
		Rscript --vanilla archaic_freq_1chrom.R {wildcards.chr} \
				{input.skov_fragments} \
				{input.sank_calls} \
				{input.sank_snps} \
				{input.stein_calls} \
				{input.stein_snps} \
				{input.recmap} 
		"""

rule make_window_beds: # genetic windows also output Morgan distance to be able to merge with frequency files
	input:
		"make_{unit}_windows_bed.R"
	output:
		"{unit}_windows.bed"
	shell:
		"""
		Rscript --vanilla make_{wildcards.unit}_windows_bed.R | sort -k1,1 -k2,2n > {output}
		"""

rule gtf_to_bed:
	input:
		"hg38.knownGene.gtf"	# obtained from USCS genome browser
	output:
		"hg38_CDS.bed"
	shell:
		"gtf2bed < {input} | grep 'CDS' | sort -k1,1 -k2,2n > {output}"

rule calculate_gene_density_physical:
	input:
		A="physical_windows.bed",
		B="hg38_CDS.bed"
	output:
		out="gene_density_physical_windows.txt",
	shell: # this gets the number of coding base pairs per window
		"""
		bedtools coverage -a {input.A} -b {input.B} | cut -f1-3,5 |\
		sort -k1,1 -k2,2n > {output.out}
		"""

rule calculate_gene_density_genetic:
	input:
		A="genetic_windows.bed",
		B="hg38_CDS.bed"
	output:
		out="gene_density_genetic_windows.txt",
	shell:
		"""
		# for genetic windows kept Morgan for id so there's an extra col in output
		bedtools coverage -a {input.A} -b {input.B} | cut -f1-4,6 |\
		sort -k1,1 -k2,2n > {output.out}
		"""

rule windowed_B_values:	
	input:
		A="{unit}_windows.bed",
		B="B_values/hg38/bstat_hg38_v2_sorted.txt"
	output:
		"B_vals_{unit}_windows.txt"
	shell:
		"""
		bedmap --echo --delim "\t" --wmean --sci {input.A} {input.B} > {output}
		"""

rule run_wavelets:
	input:
		"gene_density_{unit}_windows.txt",
		expand("archaic_freqs/chr{chr}_frq_{{unit}}_windows.txt",chr=chrs,unit=units)	
	output:
		"wavelet_results/{analysis}_{unit}.txt"
	shell:
		"""
		Rscript --vanilla wavelet_analyses.R {wildcards.unit} {wildcards.analysis}
		"""

