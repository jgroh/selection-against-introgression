import numpy as np
import os
years = ["2006","2008","2013","2015","2018"]
chrs = [s.replace("LD_map_xbirchmanni-COAC-10x-","").replace(".post.txt_mod.bed","") for s in os.listdir("LD_recMap")]

rule all:
	input:
		expand("ACUA_{year}/varDecompAll.RData",year=years),
		expand("ACUA_{year}/rAncCorDecompAll.RData",year=years),
		expand("ACUA_{year}/avgFrq_totalCor.RData",year=years)

rule interpolate_ancestry_single_chrom:
	input: 
		expand("ancestry-probs-par{par}_allchrs_ACUA_historical_{{year}}.tsv", par=["1","2"]),
		"LD_recMap/LD_map_xbirchmanni-COAC-10x-{chr}.post.txt_mod.bed"
	output:
		"ACUA_{year}/{chr}.RData"
	shell:
		"Rscript --vanilla interpolate_ancestry_single_chrom.R {wildcards.year} {wildcards.chr}"

rule all_year_chr:
	input:
		expand("ACUA_{year}/{chr}.RData",year=years,chr=chrs)

rule make_kb_bed:
	input:
		"xbir10x_chrlengths.txt",
	output:
		"allChr_1kb.bed",
	shell:
		"Rscript --vanilla allChrMakeBed_1kb.R | sort -k1,1 -k2,2n > {output}"

rule make_rec_bed:
	input:
		"xbir10x_chrlengths.txt",
		"cM_lengths_birchmanni10x.txt",
		expand("LD_recMap/LD_map_xbirchmanni-COAC-10x-{chr}.post.txt_mod.bed",chr=chrs)
	output:
		"allChr_LDRecMap.bed"
	shell:
		"Rscript --vanilla allChrMakeBed_LDRecMap.R | sort -k1,1 -k2,2n > {output}"

rule make_CDS_bed:
	input:
		"xiphophorus_birchmanni_10x_12Sep2018_yDAA6.gtf" 
	output:
		"allChr_CDS.bed"
	shell:
		"""
		grep 'CDS' {input} | cut -f1,4,5 | awk '{{print $1 "\t" $2-1 "\t" $3}}' |\\
		sort -k1,1 -k2,2n | bedtools merge -i stdin > {output}
		"""

rule calculate_cm_per_kb: 
	input:
		"allChr_1kb.bed",
		"allChr_LDRecMap.bed"
	output:
		"allChr_1kb_rec.bed"
	shell:
		# This gets the weighted mean of r for 1kb windows, the awk statement converts to cM
		"""
		bedmap --echo --delim "\t" --wmean --sci allChr_1kb.bed allChr_LDRecMap.bed |\\
		awk '{{print $1 "\t" $2 "\t" $3 "\t" ($3-$2)*$4*100}}' > {output}
		"""

rule cds_per_kb:
	input:
		A="allChr_1kb.bed",
		B="allChr_CDS.bed"
	output:
		"cds_per_kb.bed"
	shell:
		"""
		bedtools coverage -a {input.A} -b {input.B} | cut -f1-3,5 |\\
		sort -k1,1 -k2,2n > {output}
		"""
rule cds_and_cm_per_kb:
	input:
		A="cds_per_kb.bed",
		B="allChr_1kb_rec.bed"
	output:
		"allChr_cds_and_cm_per_1kb.txt"
	shell:
		"Rscript --vanilla merge_cds_and_cm_1kb.R"

rule avgFrq_totalCor:
	input:
		expand("ACUA_{{year}}/{chr}.RData",chr=chrs)
	output:
		"ACUA_{year}/avgFrq_totalCor.RData"
	shell:
		"Rscript --vanilla avgFrq_totalCor.R {wildcards.year}"

rule combine_chrs_and_run_wavelets:
	input:
		expand("ACUA_{{year}}/{chr}.RData",chr=chrs)
	output:
		"ACUA_{year}/varDecompAll.RData",
		"ACUA_{year}/rAncCorDecompAll.RData"
	shell:
		"Rscript --vanilla swordtail_wavelets.R {wildcards.year}"
