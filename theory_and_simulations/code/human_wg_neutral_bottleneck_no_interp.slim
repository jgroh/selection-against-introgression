// if running on command line, need to pass seed # and population size as command line args

initialize() {
	if (exists("slimgui"))
	{
		defineConstant("outPath", "/Users/jeff/workspace/selection-against-introgression/theory_and_simulations/results/human_wgsim_const_rec/");
		defineConstant("seed", 0);
		defineConstant("N", 1000);

		chrlengths = readFile("/Users/jeff/workspace/selection-against-introgression/theory_and_simulations/hg38_chr_lengths.txt");
		
	} else
	{
		defineConstant("outPath", "results/human_wgsim_const_rec/");
		chrlengths = readFile("/Users/brogroh/selection-against-introgression/theory_and_simulations/hg38_chr_lengths.txt");	
	}
	
	chrlengths = asFloat(chrlengths);
	nloci = asInteger(round(chrlengths/2^-16));
	rates = rep(2^-16, nloci[0]);
	for(i in 1:21)
		rates = c(rates, c(0.5, rep(2^-16, nloci[i])));
	
	defineConstant("L", asInteger(length(rates)) + 1);
	initializeTreeSeq();
	//defineConstant("L", 2753656);
	defineConstant("N1", 1);
	defineConstant("s", 0.4);
	defineConstant("alpha", 0.5);
	//defineConstant("x", 1000);
	
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	
	// number of windows present in rec map
	initializeGenomicElement(g1, 0, L-1);
	
	initializeRecombinationRate(asFloat(rates), 1:(L-1));
}

1 early() {
	sim.addSubpop("p0", 100);
	sim.addSubpop("p1", N1);
	
	//positions = sample(0:(L-1), x);
	//p1.individuals.genomes.addNewMutation(m1, 0, positions); 
	
	p0.setMigrationRates(p1,alpha);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

1 late() {p1.setSubpopulationSize(0);}


// output: gen 3 late are F2 offspring
3 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
4 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
7 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
12 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
13 early() {
	p0.setSubpopulationSize(N);
}
52 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
102 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
502 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
1002 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees"); }
