initialize() {
	
	initializeTreeSeq();
	defineConstant("L", 613171);//171); 
	//defineConstant("N", 10000); // recipient population size
	
	defineConstant("alpha", 0.5);//initial mixing proportion 
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	
	
	// recombination distances between SNPs in the swordtail data
	//rates = readFile("/Users/jeff/workspace/selection-against-introgression/datasets/swordtail_TOTO_ACUA/swordtail_SNP_recMap_slim_noRhoCap.txt");
	rates = readFile("/Users/brogroh/selection-against-introgression/datasets/swordtail_TOTO_ACUA/swordtail_SNP_recMap_slim_rhoCap0.005.txt");
	
	initializeRecombinationRate(asFloat(rates), 1:(L-1));
	
	//defineConstant("seed", 1);
	//defineConstant("outPath", "/Users/jeff/workspace/selection-against-introgression/theory_and_simulations/results/swordtail_neutral");

	defineConstant("outPath", "results/swordtail_neutral");
}

1 {
	sim.addSubpop("p0", N);
	sim.addSubpop("p1",1);
	p0.setMigrationRates(p1, alpha);

	// this may be critical see 17.5 in slim manual
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);	
}

1 late() {p1.setSubpopulationSize(0);}

// output

// gen 3 late output are F2s. i.e. 1 generation removed from initial mixing according to theory	
// this is because after setting migration rates in early gen1, individuals in late gen 1 consist of a mixture of pure individuals
// so individuals in gen 2 will contain F1s
3 late() {
	sim.treeSeqOutput(outPath + "/swordtail_replicate" + seed + "_generation0001_N" + N + ".trees"); }
	
13 late() {
	sim.treeSeqOutput(outPath + "/swordtail_replicate" + seed + "_generation0010_N" + N + ".trees"); }

103 late() {
	sim.treeSeqOutput(outPath + "/swordtail_replicate" + seed + "_generation0100_N" + N + ".trees"); }

1003 late() {
	sim.treeSeqOutput(outPath + "/swordtail_replicate" + seed + "_generation1000_N" + N + ".trees"); }
