// if running on command line, need to pass seed # and population size as command line args

initialize() {
	if (exists("slimgui"))
	{
		defineConstant("seed", 0);
		defineConstant("N", 1000);
		chrlengths = readFile("/Users/jeff/workspace/selection-against-introgression/theory_and_simulations/hg38_chr_lengths.txt");
		
	} else
	{
		defineConstant("outPath", "results/human_wgsim_neutral_equilibrium_no_interp/");
		chrlengths = readFile("hg38_chr_lengths.txt");	
	}
	
	chrlengths = asFloat(chrlengths);
	nloci = asInteger(round(chrlengths/2^-15));
	rates = rep(2^-15, nloci[0]);
	for(i in 1:21)
		rates = c(rates, c(0.5, rep(2^-15, nloci[i])));
	
	defineConstant("L", asInteger(length(rates)) + 1);
	initializeTreeSeq();
	defineConstant("N1", 1);
	defineConstant("alpha", 0.5);
	
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	// number of windows present in rec map
	initializeGenomicElement(g1, 0, L-1);
	
	initializeRecombinationRate(asFloat(rates), 1:(L-1));
}

1 early() {
	sim.addSubpop("p0", N);
	sim.addSubpop("p1", N1);
	
	p0.setMigrationRates(p1,alpha);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

1 late() {p1.setSubpopulationSize(0);}


// output: gen 3 late are F2 offspring
3 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
12 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
102 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
1002 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees"); }
