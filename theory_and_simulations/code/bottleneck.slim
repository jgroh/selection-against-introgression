initialize() {
	if (exists("slimgui"))
	{
		defineConstant("seed", 0);
		defineConstant("N", 100);
		defineConstant("outPath", "~/workspace/selection-against-introgression/theory_and_simulations/results/neutral_sims/equilibrium/");
	} else
	{	
		defineConstant("outPath", "results/neutral_sims/bottleneck/");
	}
	
	initializeTreeSeq();
	defineConstant("alpha", 0.5);
	defineConstant("genomeSize", 1e8);
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, genomeSize-1);
	defineConstant("baseRate", 1e-8);
	initializeRecombinationRate(baseRate);
	
}

// note we will recaptitate

1 early() {
	sim.addSubpop("p0", N);
	sim.addSubpop("p1", N);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //these individuals are accessed using ts.samples( in tskit

	community.rescheduleScriptBlock(s1, start=N, end=N); // migration begins when expected Fst=0.2. Individuals in p2 at generation N should be a mix of parental types
	community.rescheduleScriptBlock(s2, start=N, end=N); // migration ends
	
	community.rescheduleScriptBlock(s3, start=N+2, end=N+2); // F2s. Corresponding to 1 generation in the theory
	community.rescheduleScriptBlock(s4, start=N+11, end=N+11); // 10 generations from F1
	community.rescheduleScriptBlock(s5, start=N+101, end=N+101); // 100 generations from F1
	community.rescheduleScriptBlock(s6, start=N+1001, end=N+1001); // 1000 generations from F1
	
	// bottleneck
	community.rescheduleScriptBlock(s7, start = N+1, end = N+1); // bottleneck starts in F1
	community.rescheduleScriptBlock(s8, start = N+11, end = N+11); // lasts 10 generations
}

// expected Fst=0.2 when N=T
s1 1e6 early() {
	sim.addSubpop("p2", N);
	p2.setMigrationRates(c(p0,p1), c(alpha, 1-alpha));
}

s2 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //these individuals are accessed as time = max output gen (1001) in tskit. These are *pure parental* type individuals contained in the admixed population. 
	p2.setMigrationRates(c(p0, p1), c(0.0, 0.0));
}

s3 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

s4 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}
s5 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

s6 1e6 late(){
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees");
}

s7 1e6 early () {
	p2.setSubpopulationSize(10);
}

s8 1e6 early() {
	p2.setSubpopulationSize(N);
}
