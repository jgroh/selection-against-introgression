initialize() {
	
	initializeTreeSeq();
	defineConstant("L", 1024); 
	defineConstant("N", 100); // bottlnecked population size
	defineConstant("genomeSize",1e8);
	defineConstant("alpha", 0.5);//initial mixing proportion = starting freq in F2s
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	defineConstant("baseRate", 1e-8);
	
	setSeed(seed);
	initializeRecombinationRate((genomeSize/L)*baseRate);

	defineConstant("outPath", "results/neutral_sims/bottleneck/");
}

1 {sim.addSubpop("p1", N);
	F1s = sample(p1.individuals, asInteger(2*N*alpha));
	genomes = NULL;
	for(F1 in F1s)
	{
	genomes = c(genomes, F1.genomes[1]);
	}
	genomes.addNewMutation(m1,0,0:(L-1));
	
}

11 early() {p1.setSubpopulationSize(10000);}

// output


1 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
2 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
3 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
4 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
5 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
10 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
25 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
50 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
100 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
250 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
500 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);}
1000 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees"); }

