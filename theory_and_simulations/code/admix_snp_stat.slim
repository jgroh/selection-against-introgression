initialize() {
	if (exists("slimgui"))
	{
		defineConstant("seed", 0);
		defineConstant("N", 10000);
		defineConstant("outPath", "~/workspace/selection-against-introgression/theory_and_simulations/results/admix_snp_stat/");
	} else
	{	
		defineConstant("outPath", "results/admix_snp_stat/");
	}
	
	initializeTreeSeq();
	defineConstant("alpha", 0.5);
	defineConstant("genomeSize", 1e8);
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, genomeSize-1);
	defineConstant("baseRate", 1e-8);
	initializeRecombinationRate(baseRate);
	
}

// note we will recaptitate

1 {
	sim.addSubpop("p0", N);
	sim.addSubpop("p1", N);
	sim.rescheduleScriptBlock(s1, start=N, end=N); // migration begins when expected Fst=0.2
	sim.rescheduleScriptBlock(s2, start=N, end=N); // migration ends
	sim.rescheduleScriptBlock(s3, start=N+10, end=N+10);
	sim.rescheduleScriptBlock(s4, start=N+100, end=N+100);
	sim.rescheduleScriptBlock(s5, start=N+500, end=N+500);
	sim.rescheduleScriptBlock(s6, start=N+1000, end=N+1000);
}

// expected Fst=0.2 when N=T
s1 1e6 early() {
	sim.addSubpop("p2", N);
	p2.setMigrationRates(c(p0,p1), c(alpha, 1-alpha));
}

s2 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	p2.setMigrationRates(c(p0, p1), c(0.0, 0.0));
}

s3 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

s4 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}
s5 1e6 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

s6 1e6 late(){
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees");
}
