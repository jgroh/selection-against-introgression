initialize() {
	
	defineConstant("alpha", 0.25);
	defineConstant("genomeSize", 1e8); //genome will be 1 Morgan in length
	defineConstant("N", 1000); // population size
	initializeMutationRate(1e-8); 
	initializeMutationType("m1", 0.5, "f", 0);
	m1.mutationStackPolicy = "f";
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, genomeSize-1);
	defineConstant("baseRate", 1e-8);
	initializeRecombinationRate(baseRate);
	
	defineConstant("outPath", "results/admix_snp_stat/");

}

1 {sim.addSubpop("p0", N); }

// burnin of 10N generations for ancestral population before split (expected height of coalescent tree is 4N)
10000 { sim.addSubpopSplit("p1", N, p0); }

//introduce migration once expected value of Fst is 0.2 (for N of 1000, T = 1000)

11000 { 
	sim.addSubpop("p2", N); 
	p2.setMigrationRates(c(p0,p1), c(alpha, 1-alpha)); }
	
11001 late() {

	pos = sim.mutations.position;
	f_all = sim.mutationFrequencies(NULL);
	f0 = sim.mutationFrequencies(p0);
	f1 = sim.mutationFrequencies(p1);
	f2 = sim.mutationFrequencies(p2);
	
	filter = f_all > 0.05 & abs(f0-f1) > 0.05;
	snp_stat = (f2-f0)/(f1-f0) ;
	
	tbl = cbind(asFloat(pos[filter]), snp_stat[filter], asFloat(rep(1, length(filter[filter==T]))));

	output = "";
	for (n in 0:(nrow(tbl)-1) )
	{
	output = c(output, paste(tbl[n,]));
	}
	
	writeFile(outPath + "replicate" + seed + "_gen0001.txt", output);
}

11010 late() {

	pos = sim.mutations.position;
	f_all = sim.mutationFrequencies(NULL);
	f0 = sim.mutationFrequencies(p0);
	f1 = sim.mutationFrequencies(p1);
	f2 = sim.mutationFrequencies(p2);
	
	filter = f_all > 0.05 & abs(f0-f1) > 0.05;
	snp_stat = (f2-f0)/(f1-f0) ;
	
	tbl = cbind(asFloat(pos[filter]), snp_stat[filter], asFloat(rep(1, length(filter[filter==T]))));

	output = "";
	for (n in 0:(nrow(tbl)-1) )
	{
	output = c(output, paste(tbl[n,]));
	}
	
	writeFile(outPath + "replicate" + 0 + "_gen0010.txt", output);
}

11100 late() {

	pos = sim.mutations.position;
	f_all = sim.mutationFrequencies(NULL);
	f0 = sim.mutationFrequencies(p0);
	f1 = sim.mutationFrequencies(p1);
	f2 = sim.mutationFrequencies(p2);
	
	filter = f_all > 0.05 & abs(f0-f1) > 0.05;
	snp_stat = (f2-f0)/(f1-f0) ;
	
	tbl = cbind(asFloat(pos[filter]), snp_stat[filter], asFloat(rep(1, length(filter[filter==T]))));

	output = "";
	for (n in 0:(nrow(tbl)-1) )
	{
	output = c(output, paste(tbl[n,]));
	}
	
	writeFile(outPath + "replicate" + 0 + "_gen0100.txt", output);
}

12000 late() {

	pos = sim.mutations.position;
	f_all = sim.mutationFrequencies(NULL);
	f0 = sim.mutationFrequencies(p0);
	f1 = sim.mutationFrequencies(p1);
	f2 = sim.mutationFrequencies(p2);
	
	filter = f_all > 0.05 & abs(f0-f1) > 0.05;
	snp_stat = (f2-f0)/(f1-f0) ;
	
	tbl = cbind(asFloat(pos[filter]), snp_stat[filter], asFloat(rep(1, length(filter[filter==T]))));

	output = "";
	for (n in 0:(nrow(tbl)-1) )
	{
	output = c(output, paste(tbl[n,]));
	}
	
	writeFile(outPath + "replicate" + 0 + "_gen1000.txt", output);
}