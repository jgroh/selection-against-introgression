initialize() {
	
	defineConstant("N", 1000);
	defineConstant("alpha", 0.5);
	defineConstant("genomeSize", 1e8);
	initializeMutationRate(0); 
	m1.mutationStackPolicy = "f";
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, genomeSize-1);
	defineConstant("baseRate", 1e-8);
	initializeRecombinationRate(baseRate);
	
	defineConstant("outPath", "results/admix_snp_stat/");

}

1 {sim.addSubpop("p0", N); }


//introduce migration once expected value of Fst is 0.2 (N=T)

s1 { 
	sim.addSubpop("p2", 10000); 
	p2.setMigrationRates(c(p0,p1), c(alpha, 1-alpha)); 

	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0001.trees"); }
}
	
s2 late() {

	pos = sim.mutations.position;
	f0 = sim.mutationFrequencies(p0);
	f1 = sim.mutationFrequencies(p1);
	f2 = sim.mutationFrequencies(p2);
	
	tbl = cbind(asFloat(pos), f0, f1, f2, asFloat(rep(1, length(pos))), asFloat(rep(seed, length(pos))));

	output = "";
	for (n in 0:(nrow(tbl)-1) )
	{
	output = c(output, paste(tbl[n,]));
	}
	
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0010.trees"); }
}

