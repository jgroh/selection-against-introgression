// if running on command line, need to pass seed # and population size as command line args

initialize() {
	if (exists("slimgui"))
	{
		defineConstant("outPath", "/Users/jeff/workspace/selection-against-introgression/theory_and_simulations/results/hg1/");
		defineConstant("seed", 0);
		rates = readFile("/Users/jeff/workspace/selection-against-introgression/datasets/human/hg38_chr1_slim_recmapV2.txt");
		defineConstant("N", 10000);
	} else
	{	
		defineConstant("outPath", "results/human_chr1_neutral/");
		rates = readFile("/Users/brogroh/selection-against-introgression/datasets/human/hg38_chr1_slim_recmapV2.txt");
	}
	
	initializeTreeSeq();
	defineConstant("L", 255801);
	defineConstant("N1", 1);
	defineConstant("s", 0.4);
	defineConstant("alpha", 0.5);

	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	

	// number of windows present in rec map
	initializeGenomicElement(g1, 0, L-1);

	initializeRecombinationRate(asFloat(rates), 1:(L-1));
}

1 {
	sim.addSubpop("p0", N);
	sim.addSubpop("p1", N1); 
	
	// the donor population carries 100 deleterious loci 
	p1.individuals.genomes.addNewMutation(m1, 0, asInteger(seq(0, L-1, by = L/100))); 

	p0.setMigrationRates(p1,alpha);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

1 late() {p1.setSubpopulationSize(0);}

//calculate fitness
//1:1000 late() {
//	inds = p0.individuals;
//	introgressed = inds.countOfMutationsOfType(m1);
	// an individual homozygous for all 100 deleterious loci experiences a fitness reduction of 0.4
//	inds.fitnessScaling = 1.0 - (introgressed/(200))*s;
//}


// output: gen 3 late are F2 offspring
3 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
7 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); // 
}
12 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
52 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); // 
}
102 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); //
}
502 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); // 
}
1002 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + ".trees"); }
