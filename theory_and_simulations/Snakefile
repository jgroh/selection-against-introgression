import numpy as np

gens = [1,10,100,1000]
chrs = [str(x) for x in range(1,23)]
	
# ===== rules for simulations of human genome  =======

rule all_human_wgsim_wavelet_results:
	input:
#		expand("results/human_wgsim_neutral_{sim}_no_interp/replicate{rep}_wavelet_results.txt", rep = np.arange(10), sim = ['equilibrium','bottleneck']),
		expand("results/human_{gnom}_{selgens}_S{S}/replicate{rep}_wavelet_results.RData", gnom= ['wgsim'], selgens=['sel1-1000','sel1-10','sel900-1000'],S=['1'], rep=np.arange(20)), 
#		expand("results/human_{gnom}_{selgens}_S{S}/replicate{rep}_wavelet_results.RData", gnom= ['chr22sim'], selgens=['sel1-1000','sel1-10','sel900-1000'],S=['1'], rep=np.arange(20)), 
#		expand("results/human_chr22sim_neutral_equilibrium/replicate{rep}_wavelet_results.RData", rep=np.arange(20)), 
#		expand("results/human_wgsim_sel1-1000_S0.4/replicate{rep}_wavelet_results.RData",rep=np.arange(20)),

rule slim_recmap_chr: #do by chromosome as calc of rbar_i takes a while, combine in next step
	input:
		"aau1043_datas3" # sex-averaged recomb map from Halldorsson et al 2019
	output:
		temp("hg38_slim_recmap_chrs/hg38_wg_slim_recmap_verbose_chr{chr}.txt.gz"),
	shell:
		"Rscript --vanilla make_hg38_wg_slim_recmap.R {wildcards.chr}"

rule make_slim_recmap:
	input:
		expand("hg38_slim_recmap_chrs/hg38_wg_slim_recmap_verbose_chr{chr}.txt.gz",chr=chrs)
	output:
		"hg38_wg_slim_recmap.txt",
		"hg38_wg_slim_recmap_verbose.txt.gz",
		"hg38_chr_lengths.txt",
		"hg38_chr22_slim_recmap.txt",
		"hg38_chr22_slim_recmap_verbose.txt.gz"
	shell:
		"Rscript --vanilla combine_hg38_wg_slim_recmap.R"

rule human_wgsims:
	input:
		"hg38_wg_slim_recmap.txt",
		"hg38_chr_lengths.txt"
	output:
		temp("results/human_wgsim_{sim}/replicate{rep}.trees")
	shell:
		"""
		mkdir -p results/human_wgsim_{wildcards.sim}/
		slim -d seed={wildcards.rep} -d N=10000 code/human_wg_{wildcards.sim}.slim
		"""

rule human_chr22_sims:
	input:
		"hg38_chr22_slim_recmap.txt"
	output:
		"results/human_chr22sim_{sim}/replicate{rep}.trees/"
	shell:
		"""
		mkdir -p results/human_chr22sim_{wildcards.sim}/
		slim -d seed={wildcards.rep} -d N=10000 code/human_chr22_{wildcards.sim}.slim
		"""

rule all_human_chr22_sims:
	input:
		expand("results/human_chr22sim_{sim}/replicate{rep}.trees", sim=['neutral_equilibrium', 'sel1-1000_S1', 'sel1-10_S1', 'sel900-1000_S1'], rep = np.arange(20))

rule all_human_wgsims:
	input:
		#expand("results/human_wgsim_{sim}/replicate{rep}.trees", sim = ["neutral_equilibrium","neutral_bottleneck","sel1-1000_S0.4","sel1-10_S0.4","sel900-1000_S0.4","neutral_equilibrium_no_interp","neutral_bottleneck_no_interp","sel1-1000_S1","sel1-10_S1", "sel900-1000_S1"], rep = np.arange(10))
		expand("results/human_wgsim_{sim}/replicate{rep}.trees", sim = ["neutral_equilibrium","neutral_bottleneck","sel1-1000_S1","sel1-10_S1","sel900-1000_S1"], rep = np.arange(20))

rule output_human_popmean_ancestry:
	input:
		"results/human_{sim}/replicate{rep}.trees"
	output:
		"results/human_{sim}/replicate{rep}_frqs.txt.gz"
	shell:
		"python code/popmean_ancestry_multigen.py {input} | gzip > {output}"


#rule all_human_wgsim_ancestry: # output file will have a row for each rep x generation x snp position.
#	input:
#		expand("results/human_wgsim_{sim}/replicate{rep}_frqs.txt",sim = ["neutral_equilibrium","neutral_bottleneck","neutral_equilibrium_no_interp","sel1-1000"], rep = np.arange(20))

rule human_wgsim_neutral_wavelets:
	input:
		frqs="results/human_wgsim_neutral_{sim}/replicate{rep}_frqs.txt.gz",
		recmap="hg38_wg_slim_recmap_verbose.txt.gz"
	output:
		"results/human_wgsim_neutral_{sim}/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_wgsim_neutral_wavelets.R {input.frqs} {input.recmap}"

rule human_wgsim_neutral_wavelets_no_interp:
	input:
		frqs="results/human_wgsim_neutral_{sim}_no_interp/replicate{rep}_frqs.txt.gz",
		chrlengths="hg38_chr_lengths.txt"
	output:
		"results/human_wgsim_neutral_{sim}_no_interp/replicate{rep}_wavelet_results.txt"
	shell:
		"Rscript --vanilla code/human_wgsim_neutral_wv_no_interp.R {input.frqs} {input.chrlengths}"
		
rule human_wgsim_sel_wavelets:
	input:
		frqs="results/human_wgsim_sel{sim}/replicate{rep}_frqs.txt.gz",
		recmap="hg38_wg_slim_recmap_verbose.txt.gz"
	output:
		"results/human_wgsim_sel{sim}/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_wgsim_sel_wavelets.R {input.frqs} {input.recmap}"

rule human_chr22_neutral_wavelets:
	input:
		frqs="results/human_chr22sim_neutral_equilibrium/replicate{rep}_frqs.txt.gz",
		recmap="hg38_chr22_slim_recmap_verbose.txt.gz"
	output:
		"results/human_chr22sim_neutral_equilibrium/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_chr22sim_neutral_wavelets.R {input.frqs} {input.recmap}"

rule human_chr22_sel_wavelets:
	input:
		frqs="results/human_chr22sim_sel{sim}/replicate{rep}_frqs.txt.gz",
		recmap="hg38_chr22_slim_recmap_verbose.txt.gz"
	output:
		"results/human_chr22sim_sel{sim}/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_chr22sim_sel_wavelets.R {input.frqs} {input.recmap}"

