import numpy as np

gens = [1,10,100,1000]
chrs = [str(x) for x in range(1,23)]
	

ruleorder: slim_recmap_chr1 > slim_recmap_chr
ruleorder: human_wgsim_neutral_wavelets_no_interp > human_wgsim_neutral_wavelets
ruleorder: human_wgsims_selection_no_interp > human_wgsims_selection
ruleorder: human_wgsims_neutral_equilibrium_gen2000 > human_wgsims_neutral
ruleorder: human_wgsim_neutral_wavelets_50kb > human_wgsim_neutral_wavelets

# ===== rules for simulations of human genome  =======

rule all_human_wgsim_wavelet_results:
	input:
		expand("results/human_wgsim_neutral_equilibrium_gen2000/replicate{rep}_wavelet_results.RData", rep = np.arange(20))
#		expand("results/human_wgsim_neutral_{sim}/replicate{rep}_wavelet_results.RData", rep = np.arange(20), sim = ['equilibrium','bottleneck']),
#                expand("results/human_wgsim_neutral_{sim}/replicate{rep}_wavelet_results.txt", rep = np.arange(20), sim = ['equilibrium_no_interp', 'bottleneck_no_interp']),
#                expand("results/F2/replicate{rep}_hap_ancestry.txt", rep=np.arange(100)),
#		expand("results/human_{gnom}_{selgens}_S{S}/replicate{rep}_wavelet_results.RData", gnom= ['wgsim'], selgens=['sel1-1000','sel1-10','sel500-1000'],S=['1'], rep=np.arange(20)), 
#                expand("results/human_wgsim_selreverse/replicate{rep}_wavelet_results.RData",rep=np.arange(20)),
#		expand("results/human_wgsim_sel1-1000_S{S}/replicate{rep}_wavelet_results.RData",rep=np.arange(20), S =['0.2', '0.4']),
#                expand("results/human_wgsim_sel1-1000_S1_no_interp/replicate{rep}_wavelet_results.RData",rep=np.arange(20))

rule slim_recmap_chr: #do by chromosome as calc of rbar_i takes a while, combine in next step
	input:
		"aau1043_datas3" # sex-averaged recomb map from Halldorsson et al 2019
	output:
		temp("hg38_slim_recmap_chrs/hg38_wg_slim_recmap_verbose_chr{chr}.txt.gz"),
	shell:
		"Rscript --vanilla make_hg38_wg_slim_recmap.R {wildcards.chr}"

rule slim_recmap_chr1: #written as a separate rule bc it produces additional output (1kb map) that only needs to be done once (see ruler order above)
	input:
		"aau1043_datas3" # sex-averaged recomb map from Halldorsson et al 2019
	output:
		temp("hg38_slim_recmap_chrs/hg38_wg_slim_recmap_verbose_chr1.txt.gz"),
                "hg38_wg_slim_recmap_1kb.txt", 
                "hg38_wg_slim_recmap_1kb_verbose.txt.gz"
	shell:
		"Rscript --vanilla make_hg38_wg_slim_recmap.R 1"

rule make_slim_recmap:
	input:
		expand("hg38_slim_recmap_chrs/hg38_wg_slim_recmap_verbose_chr{chr}.txt.gz",chr=chrs)
	output:
		"hg38_wg_slim_recmap.txt",
		"hg38_wg_slim_recmap_verbose.txt.gz",
		"hg38_chr_lengths.txt",
	shell:
		"Rscript --vanilla combine_hg38_wg_slim_recmap.R"

rule human_wgsims_neutral:
  input:
    "hg38_wg_slim_recmap_1kb.txt",
    "hg38_chr_lengths.txt"
  output:
    "results/human_wgsim_neutral_{sim}/replicate{rep}.trees"
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    """
    mkdir -p results/human_wgsim_neutral_{wildcards.sim}/
    slim -d seed={wildcards.rep} -d N=10000 code/human_wg_neutral_{wildcards.sim}.slim
    """

rule human_wgsims_neutral_equilibrium_gen2000:
  input:
    "hg38_wg_slim_recmap.txt",
  output:
    "results/human_wgsim_neutral_equilibrium_gen2000/replicate{rep}.trees"
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    """
    mkdir -p results/human_wgsim_neutral_equilibrium_gen2000/
    slim -d seed={wildcards.rep} -d N=10000 code/human_wg_neutral_equilibrium_gen2000.slim
    """

rule human_wgsims_selection:
  input:
    "hg38_wg_slim_recmap.txt",
  output:
    temp("results/human_wgsim_sel{sim}/replicate{rep}.trees")
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    """
    mkdir -p results/human_wgsim_sel{wildcards.sim}/
    slim -d seed={wildcards.rep} -d N=10000 code/human_wg_sel{wildcards.sim}.slim
    """

rule all_human_wgsims:
	input:
		expand("results/human_wgsim_{sim}/replicate{rep}.trees", sim = ["neutral_equilibrium","neutral_bottleneck","neutral_equilibrium_no_interp", "neutral_bottleneck_no_interp", "sel1-1000_S1", "sel1-1000_S0.4","sel1-10_S1","sel500-1000_S1", "selreverse"], rep = np.arange(20))

rule human_wgsims_selection_no_interp:
  input:
    "hg38_chr_lengths.txt"
  output:
    temp("results/human_wgsim_sel1-1000_S1_no_interp/replicate{rep}.trees")
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    """
    mkdir -p results/human_wgsim_sel1-1000_S1_no_interp/
    slim -d seed={wildcards.rep} -d N=10000 code/human_wg_sel1-1000_S1_no_interp.slim
    """

rule output_human_popmean_ancestry:
  input:
    "results/human_{sim}/replicate{rep}.trees"
  output:
    "results/human_{sim}/replicate{rep}_frqs.txt.gz"
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    "python code/popmean_ancestry_multigen.py {input} | gzip > {output}"


rule all_human_wgsim_ancestry: # output file will have a row for each rep x generation x snp position.
	input:
		expand("results/human_wgsim_{sim}/replicate{rep}_frqs.txt.gz", sim = ["neutral_equilibrium","neutral_bottleneck","neutral_equilibrium_no_interp", "neutral_bottleneck_no_interp", "sel1-1000_S1", "sel1-1000_S0.4","sel1-10_S1","sel500-1000_S1", "selreverse"], rep = np.arange(20))

rule human_wgsim_neutral_wavelets:
	input:
		frqs="results/human_wgsim_neutral_{sim}/replicate{rep}_frqs.txt.gz",
		recmap="hg38_wg_slim_recmap_1kb_verbose.txt.gz"
	output:
		"results/human_wgsim_neutral_{sim}/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_wgsim_neutral_wavelets.R {input.frqs} {input.recmap}"

rule human_wgsim_neutral_wavelets_no_interp:
	input:
		frqs="results/human_wgsim_neutral_{sim}_no_interp/replicate{rep}_frqs.txt.gz",
		chrlengths="hg38_chr_lengths.txt"
	output:
		"results/human_wgsim_neutral_{sim}_no_interp/replicate{rep}_wavelet_results.txt"
	shell:
		"Rscript --vanilla code/human_wgsim_neutral_wv_no_interp.R {input.frqs} {input.chrlengths}"

rule human_wgsim_neutral_wavelets_50kb:
	input:
		frqs="results/human_wgsim_neutral_equilibrium_gen2000/replicate{rep}_frqs.txt.gz",
		recmap="hg38_wg_slim_recmap_verbose.txt.gz"
	output:
		"results/human_wgsim_neutral_equilibrium_gen2000/replicate{rep}_wavelet_results.RData"
	shell:
		"Rscript --vanilla code/human_wgsim_neutral_wavelets.R {input.frqs} {input.recmap}"
		
rule human_wgsim_sel_wavelets:
  input:
    frqs="results/human_wgsim_sel{sim}/replicate{rep}_frqs.txt.gz",
    recmap="hg38_wg_slim_recmap_verbose.txt.gz"
  output:
    "results/human_wgsim_sel{sim}/replicate{rep}_wavelet_results.RData"
  resources:
    runtime = lambda wildcards, attempt: attempt * 24 * 60,
    mem_mb = lambda wildcards, attempt: attempt * 20000,
  shell:
    "Rscript --vanilla code/human_wgsim_sel_wavelets.R {input.frqs} {input.recmap}"


# ======= F2 sims =====
rule F2_sim:
  input:
  output:
    "results/F2/replicate{rep}.trees"
  shell:
    "slim -d seed={wildcards.rep} -d N=100 code/F2.slim"

rule F2_hap_ancestry:
  input:
    "results/F2/replicate{rep}.trees"
  output:
    "results/F2/replicate{rep}_hap_ancestry.txt"
  shell:
    "python code/single_hap_ancestry.py {input} 100 100"
