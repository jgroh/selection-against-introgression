import numpy as np
reps = np.arange(10)
#gens = ["gen" + num for num in ["0010", "0100", "1000"]]
gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0025","0050","0100","0250","0500","1000"]]
gens_swordtail = ["gen100", "gen150", "gen200"]
#gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0050","0100","0250","0500","0750","1000"]]
#sims = ["neutral-const-recomb","sel-const-recomb","neutral-periodic-recomb","sel-periodic-recomb","single-sweep"]
simsA = ["equilibrium","bottleneck","add-sel-const-recomb","add-sel-periodic-recomb", "swordtail_neutral_n1000"]
simsB = ["equilibrium_n500"]
sims_swordtail = ["swordtail_neutral"]

rule all:
	input:
		expand("results/{sim}/ancestry_master.txt", sim=simsA),
		"results/equilibrium_n500/all-variances-master.txt",
        "results/swordtail_neutral/ancestry_master.txt"

rule simulation_setA:
	input:
	output:
		expand("results/{{sim}}/replicate{{rep}}_{gen}.trees", gen=gens)
	shell:
		"slim -d seed={wildcards.rep} code/{wildcards.sim}.slim"

rule simulation_setB:
	input:
	output:
		expand("results/equilibrium_n500/replicate{{rep}}_{gen}_allHaps.txt", gen = gens)
	shell:
		"slim -d seed={wildcards.rep} code/equilibrium_n500.slim"

rule simulation_swordtail:
    input:
    output:
		expand("results/swordtail_neutral/replicate{{rep}}_{gen}.trees", gen=gens_swordtail)
	shell:
		"slim -d seed={wildcards.rep} code/swordtail_neutral.slim"
        
rule all_sim:
	input:
		expand("results/{sim}/replicate{rep}_{gen}.trees", sim=simsA,rep=reps,gen=gens)

rule avg_ancestry_calc: # this uses a different function than the rule below for unimportant reasons
	input:
		"results/{sim}/{rep_gen}.trees"
	output:
		"results/{sim}/{rep_gen}_ancestry.txt"
	shell:
		"python3 code/derived-allele-freq.py {input} > {output}"

rule avg_ancestry_calc_swordtail:
	input:
		"results/swordtail_neutral/{rep_gen}.trees"
	output:
		"results/swordtail_neutral/{rep_gen}_ancestry.txt"
	shell:
		"python3 code/ancestry.py {input} > {output}"

rule dwt_on_haps:
	input:
		"results/equilibrium_n500/{rep_gen}_allHaps.txt"
	output:
		"results/equilibrium_n500/{rep_gen}_variances-table.txt"
	shell:
		"Rscript --vanilla code/all-variances-table.R {input} {wildcards.rep_gen} {output}"

rule aggregate_mean_ancestry:
	input:
		input1=expand("results/{{sim}}/replicate{rep}_{gen}_ancestry.txt", rep=reps, gen=gens),
        input2=expand("results/swordtail_neutral/replicate{rep}_{gen}_ancestry.txt", rep=reps, gen=gens_swordtail)
	output:
		output1="results/{sim}/ancestry_master.txt",   
        output2="results/swordtail_neutral/ancestry_master.txt"
	shell:
		"""
        cat {input1} > results/{wildcards.sim}/ancestry_master.txt
        cat {input2} > results/swordtail_neutral/ancestry_master.txt
        """


rule aggregate_variance_tables:
	input:
		expand("results/equilibrium_n500/replicate{rep}_{gen}_variances-table.txt", rep=reps,gen=gens)
	output:
		"results/equilibrium_n500/all-variances-master.txt"
	shell:
		"Rscript --vanilla code/rbind_variance_tables.R {output} {input}"
