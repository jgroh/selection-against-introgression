import numpy as np
reps = np.arange(10)
#gens = ["gen" + num for num in ["0010", "0100", "1000"]]
gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0025","0050","0100","0250","0500","1000"]]
#gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0050","0100","0250","0500","0750","1000"]]
#sims = ["neutral-const-recomb","sel-const-recomb","neutral-periodic-recomb","sel-periodic-recomb","single-sweep"]
sims = ["equilibrium","bottleneck","add-sel-const-recomb","add-sel-periodic-recomb","equilibrium_2n1000"]

rule all:
	input:
		expand("results/{sim}/ancestry_master.txt", sim=sims),
		expand("results/{sim}/all-variances-master.txt", sim=["equilibrium_2n1000"])

rule simulation:
	input:
	output:
		expand("results/{{sim}}/replicate{{rep}}_{gen}.trees", gen=gens)
	shell:
		"slim -d seed={wildcards.rep} code/{wildcards.sim}.slim"

rule all_sim:
	input:
		expand("results/{sim}/replicate{rep}_{gen}.trees", sim=sims,rep=reps,gen=gens)

rule avg_ancestry_calc:
	input:
		"results/{sim}/{rep_gen}.trees"
	output:
		"results/{sim}/{rep_gen}_ancestry.txt"
	shell:
		"python3 code/derived-allele-freq.py {input} > {output}"

rule print_haps:
	input:
		"results/{sim}/{rep_gen}.trees"
	output:
		temp("results/{sim}/{rep_gen}_all_haps.txt")
	shell:
		"python3 code/print_haplotypes.py {input} > {output}"

rule dwt_on_haps:
	input:
		"results/{sim}/{rep_gen}_all_haps.txt"
	output:
		"results/{sim}/{rep_gen}_variances-table.txt"
	shell:
		"Rscript --vanilla code/all-variances-table.R {input} {wildcards.rep_gen} {output}"

rule aggregate_mean_ancestry:
	input:
		expand("results/{{sim}}/replicate{rep}_{gen}_ancestry.txt", rep=reps, gen=gens)
	output:
		"results/{sim}/ancestry_master.txt"
	shell:
		"cat {input} > results/{wildcards.sim}/ancestry_master.txt"

rule aggregate_variance_tables:
	input:
		expand("results/{{sim}}/replicate{rep}_{gen}_variances-table.txt", rep=reps,gen=gens)
	output:
		"results/{sim}/all-variances-master.txt"
	shell:
		"Rscript --vanilla code/rbind_variance_tables.R {output} {input}"
