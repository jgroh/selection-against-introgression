import numpy as np
reps = np.arange(8)
hg1_sim_reps = np.arange(8)
snp_stat_reps = np.arange(10)

#gens = ["gen" + num for num in ["0001", "0002", "0005", "0010", "0050", "0100", "0500", "1000"]]
#gens = ["gen" + num for num in ["0001", "0100", "0101", "0201", "0500","0501","0601", "1001"]]
#gens = ["gen" + num for num in ["0001","0002", "0100","0101", "0500", "0501", "1001"]]
#gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0025","0050","0100","0250","0500","1000"]]
gens = ["gen" + num for num in ["0001","0010","0100","1000"]]
snp_stat_gens = [0,10,100,500,1000]

#gens_swordtail = ["generation" + num for num in ["100", "150", "200"]]
gens_swordtail = ["generation" + num for num in ["0001", "0010", "0100", "1000"]]
swordtail_N = [1000]
#gens = ["gen" + num for num in ["0001","0002","0003","0004","0005","0010","0050","0100","0250","0500","0750","1000"]]
#sims = ["neutral-const-recomb","sel-const-recomb","neutral-periodic-recomb","sel-periodic-recomb","single-sweep"]
#simsA = ["equilibrium","bottleneck","add-sel-const-recomb","add-sel-periodic-recomb"]
simsB = ["equilibrium_n500"]
#sims_sel_pulses = ["add-sel-periodic-recomb_gen" + g for g in ["1-1000", "1-100","100-200","500-600"]]
sims_sel_pulses = ["hg1_sel_gens" + g for g in ["1-1000", "1-10","100-110","500-510"]]
sims_swordtail = ["swordtail_neutral"]
#ruleorder: avg_ancestry_calc_swordtail > avg_ancestry_calc

# ===== rules for producing neutral simulation results ======
rule all_neutral_wv_sim:
	input:
		expand("results/neutral_sims/{sim}/ancestry_master.txt", sim = ['equilibrium', 'bottleneck'])

rule neutral_sims: # this runs simulations for neutral admixture pulse: (1) demographic equilibrium and (2) early bottleneck
	input:
	output:
		"results/neutral_sims/{sim}/replicate{rep}.trees" #trees file includes remembered individuals from various gens
	shell:
		"slim -d seed={wildcards.rep} code/{wildcards.sim}.slim"

rule ancestry_neutral_sims: # calculates ancestry fractions for the neutral sims
	input:
		"results/neutral_sims/{sim}/replicate{rep}.trees"
	output:
		"results/neutral_sims/{sim}/replicate{rep}_ancestry.txt"
	shell:
		"python code/derived-allele-freq-general.py {input} 1 2 3 4 5 10 25 50 100 250 500 1000 > {output}"

rule combine_neutral_sim_ancestry:
	input:
		expand("results/neutral_sims/{{sim}}/replicate{rep}_ancestry.txt", rep = np.arange(10))
	output:
		"results/neutral_sims/{sim}/ancestry_master.txt"
	shell:
		"cat {input} > {output}"

rule simulation_swordtail:
	input:
	output:
		temp(expand("results/swordtail_neutral/swordtail_replicate{{rep}}_{gen}_N{{N}}.trees", gen = gens_swordtail))
	shell:
		"slim -d seed={wildcards.rep} -d N={wildcards.N} code/swordtail_neutral.slim"

rule avg_ancestry_calc_swordtail:
	input:
		"results/swordtail_neutral/swordtail_{rep_gen_N}.trees"
	output:
		temp("results/swordtail_neutral/swordtail_{rep_gen_N}_ancestry.txt")
	shell:
		"python3 code/ancestry.py {input} > {output}"
	
# ===== rules for simulations with selection =======

rule human_chrom_sims:
	input:
	output:
		"results/human_chr1{sim}/replicate{rep}.trees"
	shell:
		"slim -d seed={wildcards.rep} -d N=10000 code/human_chr1{wildcards.sim}.slim"

rule all_human_chrom_sims:
	input:
		expand("results/human_chr1{sim}/replicate{rep}.trees", sim = ["neutral","sel1-1000"], rep = np.arange(10))

rule output_human_chrom_ancestry:
	input:
		"results/human_chr1{sim}/replicate{rep}.trees"
	output:
		"results/human_chr1{sim}/replicate{rep}_frqs.txt"
	shell:
		"python code/ancestry-multigen.py {input} 3 7 12 52 102 502 1002 > {output}"

rule combine_human_chrom_ancestry:
	input:
		expand("results/human_chr1{{sim}}/replicate{rep}_frqs.txt", rep=np.arange(10))
	output:
		"results/human_chr1{sim}/all_frq.txt"
	shell:
		"cat {input} > {output}"

rule all_human_chrom_ancestry:
	input:
		expand("results/human_chr1{sim}/all_frq.txt", sim=["_neutral","_sel1-1000", "_sel1-10","_sel100-200"])

# ===== allele frq based statistic sims =====

rule admix_snp_stat_simulation:
	input:
	output:
		"results/admix_snp_stat/replicate{rep}.trees"
	shell:
		"slim -d seed={wildcards.rep} -d N=100000 code/admix_snp_stat.slim"

rule admix_snp_stat_output:
	input:
		"results/admix_snp_stat/replicate{rep}.trees"
	output:
		expand("results/admix_snp_stat/replicate{{rep}}_{data}.txt", data=["haps","frqs"])
	shell:
		"python code/admix_snp_stat.py {input} 100000 10" #2nd argument is diploid size, 3rd argument is number of haplotypes to output

rule wv_of_snp_stat:
	input:
		frqs="results/admix_snp_stat/replicate{rep}_frqs.txt", 
		haps="results/admix_snp_stat/replicate{rep}_haps.txt"
	output:
		"results/admix_snp_stat/replicate{rep}_wv_results.RData"
	shell: # first argument to R script is the number of haplotypes output, should match the output from the previous rule that outputs ancestry
		"""
		Rscript --vanilla code/admix_snp_stat.R 10 {input.haps} {input.frqs}
		"""
rule all_wv_snp_stat:
	input:
		expand("results/admix_snp_stat/replicate{rep}_wv_results.RData", rep = np.arange(10))
#rule combine_snp_stat:
#	input:
#		expand("results/admix_snp_stat/replicate{rep}_wv_results.txt",rep=snp_stat_reps)
	#output:
	#	"results/admix_snp_stat/all_wv_results.txt"
	#shell:
	#	"""
	#	cat {input} > {output}
	#	"""

#rule avg_ancestry_calc: 
#	input:
#		"results/{sim}/{rep_gen}.trees"
#	output:
#		temp("results/{sim}/{rep_gen}_ancestry.txt")
#	shell:
#		"python3 code/derived-allele-freq.py {input} > {output}"


rule dwt_on_haps:
	input:
		"results/equilibrium_n500/{rep_gen}_allHaps.txt"
	output:
		"results/equilibrium_n500/{rep_gen}_variances-table.txt"
	shell:
		"Rscript --vanilla code/all-variances-table.R {input} {wildcards.rep_gen} {output}"


#rule aggregate_mean_ancestry:
#	input:
#		input = expand("results/{{sim}}/replicate{rep}_{gen}_ancestry.txt", rep=reps,gen=gens)
#	output:
#		output="results/{sim}/ancestry_master.txt"
#	shell:
#		"""
#        cat {input} > results/{wildcards.sim}/ancestry_master.txt
#        """

rule aggregate_mean_ancestry_swordtail:
	input:
		expand("results/swordtail_neutral/swordtail_replicate{rep}_{gen}_N{N}_ancestry.txt", rep=reps, gen=gens_swordtail,N=swordtail_N)
	output:
		output="results/swordtail_neutral/ancestry_master.txt"
	shell:
		"""
        cat {input} > {output}
        """

rule aggregate_variance_tables:
	input:
		expand("results/equilibrium_n500/replicate{rep}_{gen}_variances-table.txt", rep=reps,gen=gens)
	output:
		"results/equilibrium_n500/all-variances-master.txt"
	shell:
		"Rscript --vanilla code/rbind_variance_tables.R {output} {input}"
