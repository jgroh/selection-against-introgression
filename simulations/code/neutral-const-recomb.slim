// template script for varying recombination rate

initialize() {
	
	initializeTreeSeq();
	defineConstant("L", 1024); 
	defineConstant("s", 0.4);
	defineConstant("N1", 1000); // recipient population size
	defineConstant("N2", 1000); // donor population size
	defineConstant("genomeSize",1e9);
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	defineConstant("baseRate", 1e-8);
	
	setSeed(seed);

	defineConstant("outPath","results/neutral-const-recomb/");

	initializeRecombinationRate((genomeSize/L)*baseRate);

}

1 {sim.addSubpop("p1", N1);
	sim.addSubpop("p2", N2);
	
	// add mutations (sel. coefficient is zero bc fitness calculated l8r)
	p2.genomes.addNewMutation(m1, 0, 0:(L-1));
	
	// migration
	p1.setMigrationRates(p2, 0.5);
	
}

1 late() {p2.setSubpopulationSize(0);}

// output

1 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0001.trees"); }
2 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0002.trees"); }
3 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0003.trees"); }
4 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0004.trees"); }
5 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0005.trees"); }
10 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0010.trees"); }
50 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0050.trees"); }
100 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0100.trees"); }
250 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0250.trees"); }
500 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0500.trees"); }
750 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen0750.trees"); }
1000 late() {
	sim.treeSeqOutput(outPath + "/replicate" + seed + "_gen1000.trees"); }
